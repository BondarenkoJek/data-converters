{
    "name": "Milesight WT201 Downlink for ChirpStack integration",
    "type": "DOWNLINK",
    "debugMode": true,
    "configuration": {
        "scriptLang": "TBEL",
        "decoder": null,
        "tbelDecoder": null,
        "encoder": null,
        "tbelEncoder": "// Encode downlink data from incoming Rule Engine message\n\n// msg - JSON message payload downlink message json\n// msgType - type of message, for ex. 'ATTRIBUTES_UPDATED', 'POST_TELEMETRY_REQUEST', etc.\n// metadata - list of key-value pairs with additional data about the message\n// integrationMetadata - list of key-value pairs with additional data defined in Integration executing this converter\n\n/** Encoder **/\n\nvar data = encodeDownlink(msg);\n\n// Chirpstack v4\nfunction encodeDownlink(input) {\n    var encoded = bytesToBase64(milesightDeviceEncode(input));\n    return { bytes: encoded };\n}\n\n// // Chirpstack v3\n// function Encode(fPort, obj) {\n//     return milesightDeviceEncode(obj);\n// }\n//\n// // The Things Network\n// function Encoder(obj, port) {\n//     return milesightDeviceEncode(obj);\n// }\n\nfunction milesightDeviceEncode(payload) {\n    var encoded = [];\n    if (payload.reboot != null) {\n        encoded = encoded.concat(reboot(payload.reboot));\n    }\n    if (payload.report_interval != null) {\n        encoded = encoded.concat(setReportInterval(payload.report_interval));\n    }\n    if (payload.?child_lock_config.size() > 0) {\n        encoded = encoded.concat(setChildLock(payload.child_lock_config));\n    }\n    if (payload.timezone != null) {\n        encoded = encoded.concat(setTimezone(payload.timezone));\n    }\n    if (payload.?dst_config.size() > 0) {\n        encoded = encoded.concat(setDaylightSavingTime(payload.dst_config));\n    }\n    return encoded;\n}\n\nfunction reboot(reboot) {\n    var reboot_values = [0, 1];\n    if (reboot_values.indexOf(reboot) === -1) {\n        raiseError(\"Reboot [\" + reboot + \"]. Must be one of \" + reboot_values.join(\", \"));\n    }\n\n    if (reboot === 0) {\n        return [];\n    }\n    return [0xff, 0x10, 0xff];\n}\nfunction setReportInterval(report_interval) {\n    if (isDecimal(report_interval) === -1) {\n        raiseError(\"Reporting Interval must be a number.\");\n    }\n    return [0xFF, 0x8E, 0x00, report_interval, report_interval >>> 8];\n}\nfunction setChildLock(child_lock_config) {\n    var button_mask_bit_offset = { power_button: 0, up_button: 1, down_button: 2, fan_button: 3, mode_button: 4, reset_button: 5 };\n    var button_values = [0, 1];\n\n    var arrayChildLock = new int[6];\n    foreach(button : child_lock_config.entrySet()){\n        if (button_values.indexOf(button.value) === -1) {\n            raiseError(\"Child_lock_config.\" + button.key + \" [\" + button.value + \"]. Must be one of \" +   button_values.join(\", \"));\n        }\n        var ind = button_mask_bit_offset[button.key];\n        arrayChildLock[5-ind] = button.value;\n    }\n    var intChildLock = parseBinaryArrayToInt(arrayChildLock);\n    return [0xFF, 0x25, 0xFF, intChildLock];\n}\nfunction setTimezone(timezone) {\n    if (isDecimal(timezone) === -1) {\n        raiseError(\"UTC Time Zone must be a number.\");\n    }\n    var tz = timezone * 60;\n    return [0xFF, 0xBD, tz & 0xFF, (tz >>> 8) & 0xFF];\n}\n\nfunction setDaylightSavingTime(dstConfig) {\n    var dst_config_enable_values = [0, 1];\n    if (dst_config_enable_values.indexOf(dstConfig.enable) === -1) {\n        raiseError(\"Dst_config.enable must be one of \" + dst_config_enable_values.join(\", \"));\n    }\n    if (dstConfig.bias === null || isDecimal(dstConfig.bias) === -1) {\n        raiseError(\"Dst_config.bias must be a number.\");\n    }\n    if (dstConfig.?start_time.size() > 0 && dstConfig.?end_time.size() > 0) {\n        var rezDstConfig = [0xFF, 0xBA, 0, 0];\n        if (dstConfig.enable === 0) {\n            return rezDstConfig.concat([0,0,0,0,0,0,0,0]);\n        }\n        rezDstConfig[2] = dstConfig.enable;\n        rezDstConfig[3] = dstConfig.bias;\n        var startDate = validateDstConfigDateTime(dstConfig.start_time.month, dstConfig.start_time.week, dstConfig.start_time.weekday, dstConfig.start_time.time, \"Start\") ;\n        var endDate = validateDstConfigDateTime(dstConfig.end_time.month, dstConfig.end_time.week, dstConfig.end_time.weekday, dstConfig.end_time.time, \"End\") ;\n        rezDstConfig = rezDstConfig.concat(startDate);\n        return rezDstConfig.concat(endDate);\n    }\n}\nfunction validateDstConfigDateTime(month, week, weekday, dstTime, startEnd) {\n    var timeSplit = dstTime.split(\":\");\n    var times = [parseInt(timeSplit[0]), parseInt(timeSplit[1])];\n    if (times[0] < 0 || times[0] > 24) {\n        raiseError(startEnd + \" hours [\" + times[0] +\"]. Must be between 0 and 24.\");\n    }\n    if (times[1] < 0 || times[1] > 60) {\n        raiseError(startEnd + \" minutes [\" + times[1] +\"]. Must be between 0 and 60.\");\n    }\n    if (month < 1 || month > 12) {\n        raiseError(startEnd + \" month [\" + month +\"]. Must be between 1 and 12.\");\n    }\n    if (week < 1 || week > 5) {\n        raiseError(startEnd + \" week [\" + week +\"]. Must be between 1 and 5.\");\n    }\n    if (weekday < 1 || weekday > 7) {\n        raiseError(startEnd + \" weekday [\" + weekday +\"]. Must be between 1 and 7.\");\n    }\n    var dayWeek = (week << 4) | weekday;\n    var time =  times[0] *60 + times[1];\n   return [month, dayWeek, time & 0xFF, (time >>> 8) & 0xFF];\n}\n\n\n// Result object with encoded downlink payload\nvar result = {\n\n    // downlink data content type: JSON, TEXT or BINARY (base64 format)\n    contentType: \"JSON\",\n\n    fPort: 85,\n    // downlink data\n    data: JSON.stringify(data),\n    dataHex: base64ToHex(data.bytes),\n\n    // Optional metadata object presented in key/value format\n    metadata: {\n        topic: metadata['deviceType']+'/'+metadata['deviceName']+'/'+metadata['ss_serialNumber']+'/upload'\n    }\n\n};\n\nreturn result;",
        "updateOnlyKeys": [
            "tenantId",
            "tenantName",
            "applicationId",
            "applicationName",
            "deviceProfileId",
            "deviceProfileName",
            "devEui",
            "devAddr",
            "fPort",
            "frequency",
            "bandwidth",
            "spreadingFactor",
            "codeRate",
            "battery",
            "pir",
            "daylight",
            "confirmed",
            "gatewayId",
            "channel",
            "rfChain",
            "crcStatus"
        ]
    },
    "additionalInfo": {
        "description": ""
    },
    "edgeTemplate": false
}