{
    "name": "Milesight WT201 Downlink for ChirpStack integration",
    "type": "DOWNLINK",
    "debugMode": true,
    "configuration": {
        "scriptLang": "TBEL",
        "decoder": null,
        "tbelDecoder": null,
        "encoder": null,
        "tbelEncoder": "// Encode downlink data from incoming Rule Engine message\n\n// msg - JSON message payload downlink message json\n// msgType - type of message, for ex. 'ATTRIBUTES_UPDATED', 'POST_TELEMETRY_REQUEST', etc.\n// metadata - list of key-value pairs with additional data about the message\n// integrationMetadata - list of key-value pairs with additional data defined in Integration executing this converter\n\n/** Encoder **/\n\nvar data = encodeDownlink(msg);\n\n// Chirpstack v4\nfunction encodeDownlink(input) {\n    var encoded = bytesToBase64(milesightDeviceEncode(input));\n    return { bytes: encoded };\n}\n\n// // Chirpstack v3\n// function Encode(fPort, obj) {\n//     return milesightDeviceEncode(obj);\n// }\n//\n// // The Things Network\n// function Encoder(obj, port) {\n//     return milesightDeviceEncode(obj);\n// }\n\nfunction milesightDeviceEncode(payload) {\n    var encoded = [];\n\n    if (payload.reboot != null) {\n        encoded = encoded.concat(reboot(payload.reboot));\n    }\n\n    return encoded;\n}\n\nfunction reboot(reboot) {\n    var reboot_values = [0, 1];\n    if (reboot_values.indexOf(reboot) === -1) {\n        raiseError(\"reboot must be one: '0' or '1'\", reboot);\n    }\n\n    if (reboot === 0) {\n        return [];\n    }\n    return [0xff, 0x10, 0xff];\n}\n\n// Result object with encoded downlink payload\nvar result = {\n\n    // downlink data content type: JSON, TEXT or BINARY (base64 format)\n    contentType: \"JSON\",\n\n    fPort: 85,\n    // downlink data\n    data: JSON.stringify(data),\n\n    // Optional metadata object presented in key/value format\n    metadata: {\n            topic: metadata['deviceType']+'/'+metadata['deviceName']+'/'+metadata['sn_serialNumber']+'/upload'\n    }\n\n};\n\nreturn result;",
        "updateOnlyKeys": [
            "tenantId",
            "tenantName",
            "applicationId",
            "applicationName",
            "deviceProfileId",
            "deviceProfileName",
            "devEui",
            "devAddr",
            "fPort",
            "frequency",
            "bandwidth",
            "spreadingFactor",
            "codeRate",
            "battery",
            "pir",
            "daylight",
            "confirmed",
            "gatewayId",
            "channel",
            "rfChain",
            "crcStatus"
        ]
    },
    "additionalInfo": {
        "description": ""
    },
    "edgeTemplate": false
}